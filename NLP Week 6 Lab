{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NLP Week 6 Lab","provenance":[],"authorship_tag":"ABX9TyOGUNZJN/mH6eH1zF+hAOl8"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"11UeJasbn9rA"},"source":["# Lab Week 5 - Lexical Semantics:  WordNet\n","# This file has small examples that are meant to be run individually\n","#   in the Python shell"]},{"cell_type":"code","metadata":{"id":"biiEX5YwnzKG","executionInfo":{"status":"ok","timestamp":1604967886010,"user_tz":300,"elapsed":5291,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"31a08649-8cae-4417-e449-08724cefc359","colab":{"base_uri":"https://localhost:8080/"}},"source":["import nltk\n","nltk.download('wordnet')\n","# import wordnet and shorten its name to wn\n","from nltk.corpus import wordnet as wn"],"execution_count":2,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/wordnet.zip.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"k8mfLkX5oDos","executionInfo":{"status":"ok","timestamp":1604967887992,"user_tz":300,"elapsed":7241,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"eaecd70f-60d2-4c85-b721-ad0845ee0a67","colab":{"base_uri":"https://localhost:8080/"}},"source":["# for each sense of a word, there is a synset with an id consisting of one of the words,\n","#    whether it is noun, verb, adj or adverb and a number among the synsets of that word\n","# given word \"dog\", returns the ids of the synsets\n","wn.synsets('dog')\n"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('dog.n.01'),\n"," Synset('frump.n.01'),\n"," Synset('dog.n.03'),\n"," Synset('cad.n.01'),\n"," Synset('frank.n.02'),\n"," Synset('pawl.n.01'),\n"," Synset('andiron.n.01'),\n"," Synset('chase.v.01')]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"hVnPPiQZoMod","executionInfo":{"status":"ok","timestamp":1604967887994,"user_tz":300,"elapsed":7221,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"7e88c6b0-50c0-45dd-b4ed-fa085ece8aca","colab":{"base_uri":"https://localhost:8080/"}},"source":["# given a synset id, find words/lemma names (the synonyms) of the first noun sense of \"dog\" \n","wn.synset('dog.n.01').lemma_names() #most common meaning for the word dog"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['dog', 'domestic_dog', 'Canis_familiaris']"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"tcNQcC1ioOJw","executionInfo":{"status":"ok","timestamp":1604967887995,"user_tz":300,"elapsed":7195,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"11246f6b-8396-46b5-d421-fd68adfe5345","colab":{"base_uri":"https://localhost:8080/"}},"source":["# given a synset id, find lemmas of the synset (a lemma pairs a word with a synset)\n","wn.synset('dog.n.01').lemmas()\n"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Lemma('dog.n.01.dog'),\n"," Lemma('dog.n.01.domestic_dog'),\n"," Lemma('dog.n.01.Canis_familiaris')]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"Jf0lQSfdoq9R","executionInfo":{"status":"ok","timestamp":1604967887997,"user_tz":300,"elapsed":7176,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"d892309f-1a68-4836-d18e-5052f4cc00c9","colab":{"base_uri":"https://localhost:8080/"}},"source":["# find synset of a lemma\n","wn.lemma('dog.n.01.domestic_dog').synset()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Synset('dog.n.01')"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"jrijnwoioueg","executionInfo":{"status":"ok","timestamp":1604967887998,"user_tz":300,"elapsed":7152,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"c0811060-3dab-48b8-e35f-6873a2aa5e0f","colab":{"base_uri":"https://localhost:8080/"}},"source":["# find lemma names for all senses of a word\n","for synset in wn.synsets('dog'):\n","\tprint (synset, \":  \", synset.lemma_names())\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Synset('dog.n.01') :   ['dog', 'domestic_dog', 'Canis_familiaris']\n","Synset('frump.n.01') :   ['frump', 'dog']\n","Synset('dog.n.03') :   ['dog']\n","Synset('cad.n.01') :   ['cad', 'bounder', 'blackguard', 'dog', 'hound', 'heel']\n","Synset('frank.n.02') :   ['frank', 'frankfurter', 'hotdog', 'hot_dog', 'dog', 'wiener', 'wienerwurst', 'weenie']\n","Synset('pawl.n.01') :   ['pawl', 'detent', 'click', 'dog']\n","Synset('andiron.n.01') :   ['andiron', 'firedog', 'dog', 'dog-iron']\n","Synset('chase.v.01') :   ['chase', 'chase_after', 'trail', 'tail', 'tag', 'give_chase', 'dog', 'go_after', 'track']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"06X5pEREozIt","executionInfo":{"status":"ok","timestamp":1604967887999,"user_tz":300,"elapsed":7130,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"0fd7e1fa-193f-45a5-bdb2-8220fadb7091","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["# find definition of the first noun sense of dog, or namely, the dog.n.01 synset\n","wn.synset('dog.n.01').definition()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'a member of the genus Canis (probably descended from the common wolf) that has been domesticated by man since prehistoric times; occurs in many breeds'"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"TDQ2Bd4to5us","executionInfo":{"status":"ok","timestamp":1604967888000,"user_tz":300,"elapsed":7099,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"334e99dd-f99a-4339-94ab-02ee50bb071c","colab":{"base_uri":"https://localhost:8080/"}},"source":["# display an example of the synset\n","wn.synset('dog.n.01').examples()\n"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['the dog barked all night']"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"wm_NrRgQpBu8","executionInfo":{"status":"ok","timestamp":1604967888348,"user_tz":300,"elapsed":7426,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"f23dbfc9-4e58-4834-e386-f8c1d2ecb720","colab":{"base_uri":"https://localhost:8080/"}},"source":["# or show the definitions for all the synsets of a word\n","for synset in wn.synsets('dog'):\n","\tprint (synset, \":  \", synset.definition())\n"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Synset('dog.n.01') :   a member of the genus Canis (probably descended from the common wolf) that has been domesticated by man since prehistoric times; occurs in many breeds\n","Synset('frump.n.01') :   a dull unattractive unpleasant girl or woman\n","Synset('dog.n.03') :   informal term for a man\n","Synset('cad.n.01') :   someone who is morally reprehensible\n","Synset('frank.n.02') :   a smooth-textured sausage of minced beef or pork usually smoked; often served on a bread roll\n","Synset('pawl.n.01') :   a hinged catch that fits into a notch of a ratchet to move a wheel forward or prevent it from moving backward\n","Synset('andiron.n.01') :   metal supports for logs in a fireplace\n","Synset('chase.v.01') :   go after with the intent to catch\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JUDkDiNIpKBv","executionInfo":{"status":"ok","timestamp":1604967888349,"user_tz":300,"elapsed":7405,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"61fe2294-cb2e-428f-b313-3879d187292f","colab":{"base_uri":"https://localhost:8080/"}},"source":["# or combine the synonyms/lemma names, definitions and examples\n","for synset in wn.synsets('dog'):\n","\tprint (synset, \":  \")\n","\tprint ('     ', synset.lemma_names())\n","\tprint ('     ', synset.definition())\n","\tprint ('     ', synset.examples())"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Synset('dog.n.01') :  \n","      ['dog', 'domestic_dog', 'Canis_familiaris']\n","      a member of the genus Canis (probably descended from the common wolf) that has been domesticated by man since prehistoric times; occurs in many breeds\n","      ['the dog barked all night']\n","Synset('frump.n.01') :  \n","      ['frump', 'dog']\n","      a dull unattractive unpleasant girl or woman\n","      ['she got a reputation as a frump', \"she's a real dog\"]\n","Synset('dog.n.03') :  \n","      ['dog']\n","      informal term for a man\n","      ['you lucky dog']\n","Synset('cad.n.01') :  \n","      ['cad', 'bounder', 'blackguard', 'dog', 'hound', 'heel']\n","      someone who is morally reprehensible\n","      ['you dirty dog']\n","Synset('frank.n.02') :  \n","      ['frank', 'frankfurter', 'hotdog', 'hot_dog', 'dog', 'wiener', 'wienerwurst', 'weenie']\n","      a smooth-textured sausage of minced beef or pork usually smoked; often served on a bread roll\n","      []\n","Synset('pawl.n.01') :  \n","      ['pawl', 'detent', 'click', 'dog']\n","      a hinged catch that fits into a notch of a ratchet to move a wheel forward or prevent it from moving backward\n","      []\n","Synset('andiron.n.01') :  \n","      ['andiron', 'firedog', 'dog', 'dog-iron']\n","      metal supports for logs in a fireplace\n","      ['the andirons were too hot to touch']\n","Synset('chase.v.01') :  \n","      ['chase', 'chase_after', 'trail', 'tail', 'tag', 'give_chase', 'dog', 'go_after', 'track']\n","      go after with the intent to catch\n","      ['The policeman chased the mugger down the alley', 'the dog chased the rabbit']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qPDyOKW0pL--","executionInfo":{"status":"ok","timestamp":1604967888350,"user_tz":300,"elapsed":7388,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"b51db337-3d8e-439c-b88e-a4eb03c1453c","colab":{"base_uri":"https://localhost:8080/"}},"source":["##  Lexical relations between synsets in WordNet\n","# find hypernyms of synsets\n","dog1 = wn.synset('dog.n.01')\n","dog1.hypernyms()\n"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('canine.n.02'), Synset('domestic_animal.n.01')]"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"6NTRD6gqpYmM"},"source":["Video 2"]},{"cell_type":"code","metadata":{"id":"w6_-HvxQpZ6U","executionInfo":{"status":"ok","timestamp":1604967888351,"user_tz":300,"elapsed":7362,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"6d823463-cc30-4194-88c7-e1490b6abf82","colab":{"base_uri":"https://localhost:8080/"}},"source":["# find hyponyms\n","dog1.hyponyms()"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('basenji.n.01'),\n"," Synset('corgi.n.01'),\n"," Synset('cur.n.01'),\n"," Synset('dalmatian.n.02'),\n"," Synset('great_pyrenees.n.01'),\n"," Synset('griffon.n.02'),\n"," Synset('hunting_dog.n.01'),\n"," Synset('lapdog.n.01'),\n"," Synset('leonberg.n.01'),\n"," Synset('mexican_hairless.n.01'),\n"," Synset('newfoundland.n.01'),\n"," Synset('pooch.n.01'),\n"," Synset('poodle.n.01'),\n"," Synset('pug.n.01'),\n"," Synset('puppy.n.01'),\n"," Synset('spitz.n.01'),\n"," Synset('toy_dog.n.01'),\n"," Synset('working_dog.n.01')]"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"T8_jGhfOpbis","executionInfo":{"status":"ok","timestamp":1604967888351,"user_tz":300,"elapsed":7338,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"f6c8f86e-b80e-4112-d12b-d9e449067bc5","colab":{"base_uri":"https://localhost:8080/"}},"source":["# the most general hypernym of a synset\n","dog1.root_hypernyms()\n"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('entity.n.01')]"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"CuNYsqnLplpU","executionInfo":{"status":"ok","timestamp":1604967888352,"user_tz":300,"elapsed":7320,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"2948fa68-77b2-47b8-8262-e055efba4846","colab":{"base_uri":"https://localhost:8080/"}},"source":["# from the wordnet browser, we see that dog1 has two more relations\n","dog1.part_meronyms()\n"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('flag.n.07')]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"TNJUz8GJprJb","executionInfo":{"status":"ok","timestamp":1604967888353,"user_tz":300,"elapsed":7301,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"f6174073-ec71-448d-d1aa-6cc213e5944b","colab":{"base_uri":"https://localhost:8080/"}},"source":["# what is this?  check it out \n","print (wn.synset('flag.n.07').lemma_names(),wn.synset('flag.n.07').definition(), \n","       wn.synset('flag.n.07').examples())\n"],"execution_count":16,"outputs":[{"output_type":"stream","text":["['flag'] a conspicuously marked or shaped tail []\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JbBNiru2p7ES","executionInfo":{"status":"ok","timestamp":1604967888354,"user_tz":300,"elapsed":7273,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"98f670a5-14a4-4a43-a248-580a15543270","colab":{"base_uri":"https://localhost:8080/"}},"source":["# the other relation for dog1\n","dog1.member_holonyms()\n"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('canis.n.01'), Synset('pack.n.06')]"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"ZeGoInlGp-NR","executionInfo":{"status":"ok","timestamp":1604967888355,"user_tz":300,"elapsed":7240,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"31558884-bf51-4836-bb21-b66b43cf8d75","colab":{"base_uri":"https://localhost:8080/"}},"source":["# look at another word, the adjective \"good\"\n","wn.synsets('good')"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('good.n.01'),\n"," Synset('good.n.02'),\n"," Synset('good.n.03'),\n"," Synset('commodity.n.01'),\n"," Synset('good.a.01'),\n"," Synset('full.s.06'),\n"," Synset('good.a.03'),\n"," Synset('estimable.s.02'),\n"," Synset('beneficial.s.01'),\n"," Synset('good.s.06'),\n"," Synset('good.s.07'),\n"," Synset('adept.s.01'),\n"," Synset('good.s.09'),\n"," Synset('dear.s.02'),\n"," Synset('dependable.s.04'),\n"," Synset('good.s.12'),\n"," Synset('good.s.13'),\n"," Synset('effective.s.04'),\n"," Synset('good.s.15'),\n"," Synset('good.s.16'),\n"," Synset('good.s.17'),\n"," Synset('good.s.18'),\n"," Synset('good.s.19'),\n"," Synset('good.s.20'),\n"," Synset('good.s.21'),\n"," Synset('well.r.01'),\n"," Synset('thoroughly.r.02')]"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"-x1r4M-2qBfB","executionInfo":{"status":"ok","timestamp":1604967888355,"user_tz":300,"elapsed":7218,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"20bc0a49-e2f6-4caf-b464-f905b7e5429c","colab":{"base_uri":"https://localhost:8080/"}},"source":["# find antonyms, sometimes need to specify for which lemma the antonym is needed\n","good1 = wn.synset('good.a.01')\n","# display synonyms of this synset\n","good1.lemma_names()"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['good']"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"bO_Wf7_xqGJF","executionInfo":{"status":"ok","timestamp":1604967888356,"user_tz":300,"elapsed":7202,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"9e0f1464-9e18-405f-dbe2-3d2930a051ef","colab":{"base_uri":"https://localhost:8080/"}},"source":["# the antonym function is defined only on the lemma, not the synset\n","# find antonym for the first lemma of the synset\n","print(good1.lemmas())\n","good1.lemmas()[0].antonyms() \n"],"execution_count":20,"outputs":[{"output_type":"stream","text":["[Lemma('good.a.01.good')]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[Lemma('bad.a.01.bad')]"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"_9-syK_UqKdA","executionInfo":{"status":"ok","timestamp":1604967888358,"user_tz":300,"elapsed":7178,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"ac2fff01-839e-46e2-c388-b40c4e605ec7","colab":{"base_uri":"https://localhost:8080/"}},"source":["# find entailments of verbs\n","print(wn.synset('walk.v.01').entailments())\n","print(wn.synset('eat.v.01').entailments())\n"],"execution_count":21,"outputs":[{"output_type":"stream","text":["[Synset('step.v.01')]\n","[Synset('chew.v.01'), Synset('swallow.v.01')]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"x2WohGyfqNYW","executionInfo":{"status":"ok","timestamp":1604967888362,"user_tz":300,"elapsed":7160,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"274da9a0-2924-46e5-c5a0-f02de70f24ea","colab":{"base_uri":"https://localhost:8080/"}},"source":["# trace paths of a synset by visiting its hypernyms\n","dog1.hypernyms()\n"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('canine.n.02'), Synset('domestic_animal.n.01')]"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"H26sEcPzqRIa","executionInfo":{"status":"ok","timestamp":1604967888363,"user_tz":300,"elapsed":7143,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"bb0af28b-8bac-4a0a-d8e6-d74f75047449","colab":{"base_uri":"https://localhost:8080/"}},"source":["# number of paths from the synset to the root concept \"entity\"\n","paths=dog1.hypernym_paths()\n","print(len(paths) )\n","# look at the first path\n","paths[0]\n"],"execution_count":23,"outputs":[{"output_type":"stream","text":["2\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[Synset('entity.n.01'),\n"," Synset('physical_entity.n.01'),\n"," Synset('object.n.01'),\n"," Synset('whole.n.02'),\n"," Synset('living_thing.n.01'),\n"," Synset('organism.n.01'),\n"," Synset('animal.n.01'),\n"," Synset('chordate.n.01'),\n"," Synset('vertebrate.n.01'),\n"," Synset('mammal.n.01'),\n"," Synset('placental.n.01'),\n"," Synset('carnivore.n.01'),\n"," Synset('canine.n.02'),\n"," Synset('dog.n.01')]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"ilfSMnsyqSjB","executionInfo":{"status":"ok","timestamp":1604967888365,"user_tz":300,"elapsed":7127,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"3a2d8591-88e5-416c-af96-2fb1c3ca0ef1","colab":{"base_uri":"https://localhost:8080/"}},"source":["# or just list the names in the paths\n","#list the first path\n","[synset.name() for synset in paths[0]]\n"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['entity.n.01',\n"," 'physical_entity.n.01',\n"," 'object.n.01',\n"," 'whole.n.02',\n"," 'living_thing.n.01',\n"," 'organism.n.01',\n"," 'animal.n.01',\n"," 'chordate.n.01',\n"," 'vertebrate.n.01',\n"," 'mammal.n.01',\n"," 'placental.n.01',\n"," 'carnivore.n.01',\n"," 'canine.n.02',\n"," 'dog.n.01']"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"0icB5X05qhmL","executionInfo":{"status":"ok","timestamp":1604967888365,"user_tz":300,"elapsed":7106,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"2ed4bae1-2ae9-46ab-fb61-e81356df1492","colab":{"base_uri":"https://localhost:8080/"}},"source":["#list the second path \n","[synset.name() for synset in paths[1]] "],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['entity.n.01',\n"," 'physical_entity.n.01',\n"," 'object.n.01',\n"," 'whole.n.02',\n"," 'living_thing.n.01',\n"," 'organism.n.01',\n"," 'animal.n.01',\n"," 'domestic_animal.n.01',\n"," 'dog.n.01']"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"_pScHJ1TqzfQ"},"source":["### Word similarity Video 3"]},{"cell_type":"code","metadata":{"id":"tetF5VmKq1RA","executionInfo":{"status":"ok","timestamp":1604967888366,"user_tz":300,"elapsed":7079,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}}},"source":["# define 3 different types of whales\n","right = wn.synset('right_whale.n.01')\n","minke = wn.synset('minke_whale.n.01')  \n","orca = wn.synset('orca.n.01') \n"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"UGoWmKmtq-OY","executionInfo":{"status":"ok","timestamp":1604967888367,"user_tz":300,"elapsed":7062,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"92aa2f13-72a2-4000-a93a-50aaf8f1d6bc","colab":{"base_uri":"https://localhost:8080/"}},"source":["# look at the paths of these three whales\n","print(right.hypernym_paths())\n","print(minke.hypernym_paths())\n","print(orca.hypernym_paths())\n"],"execution_count":27,"outputs":[{"output_type":"stream","text":["[[Synset('entity.n.01'), Synset('physical_entity.n.01'), Synset('object.n.01'), Synset('whole.n.02'), Synset('living_thing.n.01'), Synset('organism.n.01'), Synset('animal.n.01'), Synset('chordate.n.01'), Synset('vertebrate.n.01'), Synset('mammal.n.01'), Synset('placental.n.01'), Synset('aquatic_mammal.n.01'), Synset('cetacean.n.01'), Synset('whale.n.02'), Synset('baleen_whale.n.01'), Synset('right_whale.n.01')]]\n","[[Synset('entity.n.01'), Synset('physical_entity.n.01'), Synset('object.n.01'), Synset('whole.n.02'), Synset('living_thing.n.01'), Synset('organism.n.01'), Synset('animal.n.01'), Synset('chordate.n.01'), Synset('vertebrate.n.01'), Synset('mammal.n.01'), Synset('placental.n.01'), Synset('aquatic_mammal.n.01'), Synset('cetacean.n.01'), Synset('whale.n.02'), Synset('baleen_whale.n.01'), Synset('rorqual.n.01'), Synset('lesser_rorqual.n.01')]]\n","[[Synset('entity.n.01'), Synset('physical_entity.n.01'), Synset('object.n.01'), Synset('whole.n.02'), Synset('living_thing.n.01'), Synset('organism.n.01'), Synset('animal.n.01'), Synset('chordate.n.01'), Synset('vertebrate.n.01'), Synset('mammal.n.01'), Synset('placental.n.01'), Synset('aquatic_mammal.n.01'), Synset('cetacean.n.01'), Synset('whale.n.02'), Synset('toothed_whale.n.01'), Synset('dolphin.n.02'), Synset('killer_whale.n.01')]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8dVkJBl7rBWl","executionInfo":{"status":"ok","timestamp":1604967888368,"user_tz":300,"elapsed":7051,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"e6fb0d5f-7963-4095-95f7-a4c53e9dcfc4","colab":{"base_uri":"https://localhost:8080/"}},"source":["# find the least ancestor of right and minke, and then right and orca\n","print(right.lowest_common_hypernyms(minke))\n","print(right.lowest_common_hypernyms(orca))"],"execution_count":28,"outputs":[{"output_type":"stream","text":["[Synset('baleen_whale.n.01')]\n","[Synset('whale.n.02')]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"heDlSrlurFNx","executionInfo":{"status":"ok","timestamp":1604967888368,"user_tz":300,"elapsed":7043,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"804917b8-0574-4173-c79a-bdd33a099d9e","colab":{"base_uri":"https://localhost:8080/"}},"source":["# the function min_depth gives the length of a path from a word to the top of the hierarchy\n","print(right.min_depth() )\n","print(wn.synset('baleen_whale.n.01').min_depth() )\n","print(wn.synset('entity.n.01').min_depth())\n"],"execution_count":29,"outputs":[{"output_type":"stream","text":["15\n","14\n","0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"S5WkdN7qrQSj","executionInfo":{"status":"ok","timestamp":1604967888369,"user_tz":300,"elapsed":7020,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"34c35976-650b-479f-f52b-d24f1719ef0a","colab":{"base_uri":"https://localhost:8080/"}},"source":["# the path similarity gives a similarity score between 0 and 1\n","print(right.path_similarity(minke) )\n","print(right.path_similarity(orca))"],"execution_count":30,"outputs":[{"output_type":"stream","text":["0.25\n","0.16666666666666666\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"N7t-id2NrXvh","executionInfo":{"status":"ok","timestamp":1604967888370,"user_tz":300,"elapsed":7007,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}}},"source":["# define 2 more words and look at their similarity\n","tortoise = wn.synset('tortoise.n.01')\n","novel = wn.synset('novel.n.01')"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"U3LFTjOPray3","executionInfo":{"status":"ok","timestamp":1604967888538,"user_tz":300,"elapsed":7164,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"4a03fecc-e0ca-42d0-e7e6-0a01b4062984","colab":{"base_uri":"https://localhost:8080/"}},"source":["# note the least ancestor of these two words\n","print(right.lowest_common_hypernyms(tortoise))\n","print(right.lowest_common_hypernyms(novel))\n","print(right.path_similarity(tortoise) )\n","print(right.path_similarity(novel))\n"],"execution_count":32,"outputs":[{"output_type":"stream","text":["[Synset('vertebrate.n.01')]\n","[Synset('entity.n.01')]\n","0.07692307692307693\n","0.043478260869565216\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ORfojTMbrnSP","executionInfo":{"status":"ok","timestamp":1604967888541,"user_tz":300,"elapsed":7154,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"5fda5464-29e8-4a1e-f961-6972fe040a9a","colab":{"base_uri":"https://localhost:8080/"}},"source":["# other similarity measures\n","help(wn)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Help on WordNetCorpusReader in module nltk.corpus.reader.wordnet object:\n","\n","class WordNetCorpusReader(nltk.corpus.reader.api.CorpusReader)\n"," |  A corpus reader used to access wordnet or its variants.\n"," |  \n"," |  Method resolution order:\n"," |      WordNetCorpusReader\n"," |      nltk.corpus.reader.api.CorpusReader\n"," |      builtins.object\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __init__(self, root, omw_reader)\n"," |      Construct a new wordnet corpus reader, with the given root\n"," |      directory.\n"," |  \n"," |  all_lemma_names(self, pos=None, lang='eng')\n"," |      Return all lemma names for all synsets for the given\n"," |      part of speech tag and language or languages. If pos is\n"," |      not specified, all synsets for all parts of speech will\n"," |      be used.\n"," |  \n"," |  all_synsets(self, pos=None)\n"," |      Iterate over all synsets with a given part of speech tag.\n"," |      If no pos is specified, all synsets for all parts of speech\n"," |      will be loaded.\n"," |  \n"," |  citation(self, lang='omw')\n"," |      Return the contents of citation.bib file (for omw)\n"," |      use lang=lang to get the citation for an individual language\n"," |  \n"," |  custom_lemmas(self, tab_file, lang)\n"," |      Reads a custom tab file containing mappings of lemmas in the given\n"," |      language to Princeton WordNet 3.0 synset offsets, allowing NLTK's\n"," |      WordNet functions to then be used with that language.\n"," |      \n"," |      See the \"Tab files\" section at http://compling.hss.ntu.edu.sg/omw/ for\n"," |      documentation on the Multilingual WordNet tab file format.\n"," |      \n"," |      :param tab_file: Tab file as a file or file-like object\n"," |      :type  lang str\n"," |      :param lang ISO 639-3 code of the language of the tab file\n"," |  \n"," |  get_version(self)\n"," |  \n"," |  ic(self, corpus, weight_senses_equally=False, smoothing=1.0)\n"," |      Creates an information content lookup dictionary from a corpus.\n"," |      \n"," |      :type corpus: CorpusReader\n"," |      :param corpus: The corpus from which we create an information\n"," |      content dictionary.\n"," |      :type weight_senses_equally: bool\n"," |      :param weight_senses_equally: If this is True, gives all\n"," |      possible senses equal weight rather than dividing by the\n"," |      number of possible senses.  (If a word has 3 synses, each\n"," |      sense gets 0.3333 per appearance when this is False, 1.0 when\n"," |      it is true.)\n"," |      :param smoothing: How much do we smooth synset counts (default is 1.0)\n"," |      :type smoothing: float\n"," |      :return: An information content dictionary\n"," |  \n"," |  jcn_similarity(self, synset1, synset2, ic, verbose=False)\n"," |      Jiang-Conrath Similarity:\n"," |      Return a score denoting how similar two word senses are, based on the\n"," |      Information Content (IC) of the Least Common Subsumer (most specific\n"," |      ancestor node) and that of the two input Synsets. The relationship is\n"," |      given by the equation 1 / (IC(s1) + IC(s2) - 2 * IC(lcs)).\n"," |      \n"," |      :type  other: Synset\n"," |      :param other: The ``Synset`` that this ``Synset`` is being compared to.\n"," |      :type  ic: dict\n"," |      :param ic: an information content object (as returned by\n"," |          ``nltk.corpus.wordnet_ic.ic()``).\n"," |      :return: A float score denoting the similarity of the two ``Synset``\n"," |          objects.\n"," |  \n"," |  langs(self)\n"," |      return a list of languages supported by Multilingual Wordnet\n"," |  \n"," |  lch_similarity(self, synset1, synset2, verbose=False, simulate_root=True)\n"," |      Leacock Chodorow Similarity:\n"," |      Return a score denoting how similar two word senses are, based on the\n"," |      shortest path that connects the senses (as above) and the maximum depth\n"," |      of the taxonomy in which the senses occur. The relationship is given as\n"," |      -log(p/2d) where p is the shortest path length and d is the taxonomy\n"," |      depth.\n"," |      \n"," |      :type  other: Synset\n"," |      :param other: The ``Synset`` that this ``Synset`` is being compared to.\n"," |      :type simulate_root: bool\n"," |      :param simulate_root: The various verb taxonomies do not\n"," |          share a single root which disallows this metric from working for\n"," |          synsets that are not connected. This flag (True by default)\n"," |          creates a fake root that connects all the taxonomies. Set it\n"," |          to false to disable this behavior. For the noun taxonomy,\n"," |          there is usually a default root except for WordNet version 1.6.\n"," |          If you are using wordnet 1.6, a fake root will be added for nouns\n"," |          as well.\n"," |      :return: A score denoting the similarity of the two ``Synset`` objects,\n"," |          normally greater than 0. None is returned if no connecting path\n"," |          could be found. If a ``Synset`` is compared with itself, the\n"," |          maximum score is returned, which varies depending on the taxonomy\n"," |          depth.\n"," |  \n"," |  lemma(self, name, lang='eng')\n"," |      Return lemma object that matches the name\n"," |  \n"," |  lemma_count(self, lemma)\n"," |      Return the frequency count for this Lemma\n"," |  \n"," |  lemma_from_key(self, key)\n"," |  \n"," |  lemmas(self, lemma, pos=None, lang='eng')\n"," |      Return all Lemma objects with a name matching the specified lemma\n"," |      name and part of speech tag. Matches any part of speech tag if none is\n"," |      specified.\n"," |  \n"," |  license(self, lang='eng')\n"," |      Return the contents of LICENSE (for omw)\n"," |      use lang=lang to get the license for an individual language\n"," |  \n"," |  lin_similarity(self, synset1, synset2, ic, verbose=False)\n"," |      Lin Similarity:\n"," |      Return a score denoting how similar two word senses are, based on the\n"," |      Information Content (IC) of the Least Common Subsumer (most specific\n"," |      ancestor node) and that of the two input Synsets. The relationship is\n"," |      given by the equation 2 * IC(lcs) / (IC(s1) + IC(s2)).\n"," |      \n"," |      :type other: Synset\n"," |      :param other: The ``Synset`` that this ``Synset`` is being compared to.\n"," |      :type ic: dict\n"," |      :param ic: an information content object (as returned by\n"," |          ``nltk.corpus.wordnet_ic.ic()``).\n"," |      :return: A float score denoting the similarity of the two ``Synset``\n"," |          objects, in the range 0 to 1.\n"," |  \n"," |  morphy(self, form, pos=None, check_exceptions=True)\n"," |      Find a possible base form for the given form, with the given\n"," |      part of speech, by checking WordNet's list of exceptional\n"," |      forms, and by recursively stripping affixes for this part of\n"," |      speech until a form in WordNet is found.\n"," |      \n"," |      >>> from nltk.corpus import wordnet as wn\n"," |      >>> print(wn.morphy('dogs'))\n"," |      dog\n"," |      >>> print(wn.morphy('churches'))\n"," |      church\n"," |      >>> print(wn.morphy('aardwolves'))\n"," |      aardwolf\n"," |      >>> print(wn.morphy('abaci'))\n"," |      abacus\n"," |      >>> wn.morphy('hardrock', wn.ADV)\n"," |      >>> print(wn.morphy('book', wn.NOUN))\n"," |      book\n"," |      >>> wn.morphy('book', wn.ADJ)\n"," |  \n"," |  of2ss(self, of)\n"," |      take an id and return the synsets\n"," |  \n"," |  path_similarity(self, synset1, synset2, verbose=False, simulate_root=True)\n"," |      Path Distance Similarity:\n"," |      Return a score denoting how similar two word senses are, based on the\n"," |      shortest path that connects the senses in the is-a (hypernym/hypnoym)\n"," |      taxonomy. The score is in the range 0 to 1, except in those cases where\n"," |      a path cannot be found (will only be true for verbs as there are many\n"," |      distinct verb taxonomies), in which case None is returned. A score of\n"," |      1 represents identity i.e. comparing a sense with itself will return 1.\n"," |      \n"," |      :type other: Synset\n"," |      :param other: The ``Synset`` that this ``Synset`` is being compared to.\n"," |      :type simulate_root: bool\n"," |      :param simulate_root: The various verb taxonomies do not\n"," |          share a single root which disallows this metric from working for\n"," |          synsets that are not connected. This flag (True by default)\n"," |          creates a fake root that connects all the taxonomies. Set it\n"," |          to false to disable this behavior. For the noun taxonomy,\n"," |          there is usually a default root except for WordNet version 1.6.\n"," |          If you are using wordnet 1.6, a fake root will be added for nouns\n"," |          as well.\n"," |      :return: A score denoting the similarity of the two ``Synset`` objects,\n"," |          normally between 0 and 1. None is returned if no connecting path\n"," |          could be found. 1 is returned if a ``Synset`` is compared with\n"," |          itself.\n"," |  \n"," |  readme(self, lang='omw')\n"," |      Return the contents of README (for omw)\n"," |      use lang=lang to get the readme for an individual language\n"," |  \n"," |  res_similarity(self, synset1, synset2, ic, verbose=False)\n"," |      Resnik Similarity:\n"," |      Return a score denoting how similar two word senses are, based on the\n"," |      Information Content (IC) of the Least Common Subsumer (most specific\n"," |      ancestor node).\n"," |      \n"," |      :type  other: Synset\n"," |      :param other: The ``Synset`` that this ``Synset`` is being compared to.\n"," |      :type ic: dict\n"," |      :param ic: an information content object (as returned by\n"," |          ``nltk.corpus.wordnet_ic.ic()``).\n"," |      :return: A float score denoting the similarity of the two ``Synset``\n"," |          objects. Synsets whose LCS is the root node of the taxonomy will\n"," |          have a score of 0 (e.g. N['dog'][0] and N['table'][0]).\n"," |  \n"," |  ss2of(self, ss)\n"," |      return the ID of the synset\n"," |  \n"," |  synset(self, name)\n"," |      #############################################################\n"," |      # Loading Synsets\n"," |      #############################################################\n"," |  \n"," |  synset_from_pos_and_offset(self, pos, offset)\n"," |  \n"," |  synsets(self, lemma, pos=None, lang='eng', check_exceptions=True)\n"," |      Load all synsets with a given lemma and part of speech tag.\n"," |      If no pos is specified, all synsets for all parts of speech\n"," |      will be loaded.\n"," |      If lang is specified, all the synsets associated with the lemma name\n"," |      of that language will be returned.\n"," |  \n"," |  words(self, lang='eng')\n"," |      return lemmas of the given language as list of words\n"," |  \n"," |  wup_similarity(self, synset1, synset2, verbose=False, simulate_root=True)\n"," |      Wu-Palmer Similarity:\n"," |      Return a score denoting how similar two word senses are, based on the\n"," |      depth of the two senses in the taxonomy and that of their Least Common\n"," |      Subsumer (most specific ancestor node). Previously, the scores computed\n"," |      by this implementation did _not_ always agree with those given by\n"," |      Pedersen's Perl implementation of WordNet Similarity. However, with\n"," |      the addition of the simulate_root flag (see below), the score for\n"," |      verbs now almost always agree but not always for nouns.\n"," |      \n"," |      The LCS does not necessarily feature in the shortest path connecting\n"," |      the two senses, as it is by definition the common ancestor deepest in\n"," |      the taxonomy, not closest to the two senses. Typically, however, it\n"," |      will so feature. Where multiple candidates for the LCS exist, that\n"," |      whose shortest path to the root node is the longest will be selected.\n"," |      Where the LCS has multiple paths to the root, the longer path is used\n"," |      for the purposes of the calculation.\n"," |      \n"," |      :type  other: Synset\n"," |      :param other: The ``Synset`` that this ``Synset`` is being compared to.\n"," |      :type simulate_root: bool\n"," |      :param simulate_root: The various verb taxonomies do not\n"," |          share a single root which disallows this metric from working for\n"," |          synsets that are not connected. This flag (True by default)\n"," |          creates a fake root that connects all the taxonomies. Set it\n"," |          to false to disable this behavior. For the noun taxonomy,\n"," |          there is usually a default root except for WordNet version 1.6.\n"," |          If you are using wordnet 1.6, a fake root will be added for nouns\n"," |          as well.\n"," |      :return: A float score denoting the similarity of the two ``Synset``\n"," |          objects, normally greater than zero. If no connecting path between\n"," |          the two senses can be found, None is returned.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes defined here:\n"," |  \n"," |  ADJ = 'a'\n"," |  \n"," |  ADJ_SAT = 's'\n"," |  \n"," |  ADV = 'r'\n"," |  \n"," |  MORPHOLOGICAL_SUBSTITUTIONS = {'a': [('er', ''), ('est', ''), ('er', '...\n"," |  \n"," |  NOUN = 'n'\n"," |  \n"," |  VERB = 'v'\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from nltk.corpus.reader.api.CorpusReader:\n"," |  \n"," |  __repr__(self)\n"," |      Return repr(self).\n"," |  \n"," |  __unicode__ = __str__(self, /)\n"," |  \n"," |  abspath(self, fileid)\n"," |      Return the absolute path for the given file.\n"," |      \n"," |      :type fileid: str\n"," |      :param fileid: The file identifier for the file whose path\n"," |          should be returned.\n"," |      :rtype: PathPointer\n"," |  \n"," |  abspaths(self, fileids=None, include_encoding=False, include_fileid=False)\n"," |      Return a list of the absolute paths for all fileids in this corpus;\n"," |      or for the given list of fileids, if specified.\n"," |      \n"," |      :type fileids: None or str or list\n"," |      :param fileids: Specifies the set of fileids for which paths should\n"," |          be returned.  Can be None, for all fileids; a list of\n"," |          file identifiers, for a specified set of fileids; or a single\n"," |          file identifier, for a single file.  Note that the return\n"," |          value is always a list of paths, even if ``fileids`` is a\n"," |          single file identifier.\n"," |      \n"," |      :param include_encoding: If true, then return a list of\n"," |          ``(path_pointer, encoding)`` tuples.\n"," |      \n"," |      :rtype: list(PathPointer)\n"," |  \n"," |  encoding(self, file)\n"," |      Return the unicode encoding for the given corpus file, if known.\n"," |      If the encoding is unknown, or if the given file should be\n"," |      processed using byte strings (str), then return None.\n"," |  \n"," |  ensure_loaded(self)\n"," |      Load this corpus (if it has not already been loaded).  This is\n"," |      used by LazyCorpusLoader as a simple method that can be used to\n"," |      make sure a corpus is loaded -- e.g., in case a user wants to\n"," |      do help(some_corpus).\n"," |  \n"," |  fileids(self)\n"," |      Return a list of file identifiers for the fileids that make up\n"," |      this corpus.\n"," |  \n"," |  open(self, file)\n"," |      Return an open stream that can be used to read the given file.\n"," |      If the file's encoding is not None, then the stream will\n"," |      automatically decode the file's contents into unicode.\n"," |      \n"," |      :param file: The file identifier of the file to read.\n"," |  \n"," |  unicode_repr = __repr__(self)\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from nltk.corpus.reader.api.CorpusReader:\n"," |  \n"," |  __dict__\n"," |      dictionary for instance variables (if defined)\n"," |  \n"," |  __weakref__\n"," |      list of weak references to the object (if defined)\n"," |  \n"," |  root\n"," |      The directory where this corpus is stored.\n"," |      \n"," |      :type: PathPointer\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Dqfvlh0Vr8Xt","executionInfo":{"status":"ok","timestamp":1604967897186,"user_tz":300,"elapsed":15785,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"596fe105-9ff4-4835-9cae-ab246954a9a4","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Leacock-Chodorow Similarity, also uses path lengths and others\n","print(right.lch_similarity(orca))\n","print(right.lch_similarity(tortoise))\n","print(right.lch_similarity(novel))\n"],"execution_count":34,"outputs":[{"output_type":"stream","text":["1.845826690498331\n","1.072636802264849\n","0.5020919437972361\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PmnFPVcvsB3w","executionInfo":{"status":"ok","timestamp":1604967898436,"user_tz":300,"elapsed":17021,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"9fc59ecd-fbd3-4ee4-aea9-e297246178df","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Resnick similarity gets information content measure\n","# first get information content from a general corpus\n","nltk.download('wordnet_ic')\n","from nltk.corpus import wordnet_ic\n","brown_ic = wordnet_ic.ic('ic-brown.dat')"],"execution_count":35,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package wordnet_ic to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/wordnet_ic.zip.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8uYq6EYisTLk","executionInfo":{"status":"ok","timestamp":1604967898445,"user_tz":300,"elapsed":17015,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"47d35aea-f4d9-4c59-c1d0-6e118484e44c","colab":{"base_uri":"https://localhost:8080/"}},"source":["# try Resnik Similarity\n","print(right.res_similarity(orca, brown_ic))\n","print(right.res_similarity(tortoise, brown_ic))\n","print(right.res_similarity(novel, brown_ic))"],"execution_count":36,"outputs":[{"output_type":"stream","text":["10.939239388446227\n","5.2175784741185165\n","-0.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xfyAsu83skEu"},"source":["#####Lab 6 Part 5"]},{"cell_type":"code","metadata":{"id":"tNxL7w4WspTJ","executionInfo":{"status":"ok","timestamp":1604967898446,"user_tz":300,"elapsed":17006,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"0dc16e5e-2317-4465-c958-90961ed73d32","colab":{"base_uri":"https://localhost:8080/"}},"source":["# for each sense of a word, there is a synset with an id consisting of one of the words,\n","#    whether it is noun, verb, adj or adverb and a number among the synsets of that word\n","# given word \"dog\", returns the ids of the synsets\n","wn.synsets('ball')"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('ball.n.01'),\n"," Synset('musket_ball.n.01'),\n"," Synset('ball.n.03'),\n"," Synset('ball.n.04'),\n"," Synset('testis.n.01'),\n"," Synset('ball.n.06'),\n"," Synset('ball.n.07'),\n"," Synset('ball.n.08'),\n"," Synset('ball.n.09'),\n"," Synset('ball.n.10'),\n"," Synset('ball.n.11'),\n"," Synset('ball.n.12'),\n"," Synset('ball.v.01')]"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"tPzkjWwgtT6S","executionInfo":{"status":"ok","timestamp":1604967898448,"user_tz":300,"elapsed":16996,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"6dac9b59-00d9-4755-a01d-39704a31cf00","colab":{"base_uri":"https://localhost:8080/"}},"source":["# or combine the synonyms/lemma names, definitions and examples\n","for synset in wn.synsets('ball'):\n","\tprint (synset, \":  \")\n","\tprint ('     ', synset.lemma_names())\n","\tprint ('     ', synset.definition())\n","\tprint ('     ', synset.examples())"],"execution_count":38,"outputs":[{"output_type":"stream","text":["Synset('ball.n.01') :  \n","      ['ball']\n","      round object that is hit or thrown or kicked in games\n","      ['the ball travelled 90 mph on his serve', 'the mayor threw out the first ball', 'the ball rolled into the corner pocket']\n","Synset('musket_ball.n.01') :  \n","      ['musket_ball', 'ball']\n","      a solid projectile that is shot by a musket\n","      ['they had to carry a ramrod as well as powder and ball']\n","Synset('ball.n.03') :  \n","      ['ball', 'globe', 'orb']\n","      an object with a spherical shape\n","      ['a ball of fire']\n","Synset('ball.n.04') :  \n","      ['ball']\n","      the people assembled at a lavish formal dance\n","      ['the ball was already emptying out before the fire alarm sounded']\n","Synset('testis.n.01') :  \n","      ['testis', 'testicle', 'orchis', 'ball', 'ballock', 'bollock', 'nut', 'egg']\n","      one of the two male reproductive glands that produce spermatozoa and secrete androgens\n","      ['she kicked him in the balls and got away']\n","Synset('ball.n.06') :  \n","      ['ball']\n","      a spherical object used as a plaything\n","      ['he played with his rubber ball in the bathtub']\n","Synset('ball.n.07') :  \n","      ['Ball', 'Lucille_Ball']\n","      United States comedienne best known as the star of a popular television program (1911-1989)\n","      []\n","Synset('ball.n.08') :  \n","      ['ball', 'clod', 'glob', 'lump', 'clump', 'chunk']\n","      a compact mass\n","      ['a ball of mud caught him on the shoulder']\n","Synset('ball.n.09') :  \n","      ['ball', 'formal']\n","      a lavish dance requiring formal attire\n","      []\n","Synset('ball.n.10') :  \n","      ['ball']\n","      a more or less rounded anatomical body or mass\n","      ['the ball at the base of the thumb', 'he stood on the balls of his feet']\n","Synset('ball.n.11') :  \n","      ['ball']\n","      the game of baseball\n","      []\n","Synset('ball.n.12') :  \n","      ['ball']\n","      a pitch that is not in the strike zone\n","      ['he threw nine straight balls before the manager yanked him']\n","Synset('ball.v.01') :  \n","      ['ball']\n","      form into a ball by winding or rolling\n","      ['ball wool']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MlR0iTnXtwsF","executionInfo":{"status":"ok","timestamp":1604967898449,"user_tz":300,"elapsed":16986,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"502403ce-1371-42c0-dbf2-f9a35396a630","colab":{"base_uri":"https://localhost:8080/"}},"source":["##  Lexical relations between synsets in WordNet\n","# find hypernyms of synsets\n","ball1 = wn.synset('ball.n.01')\n","ball1.hypernyms()\n"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Synset('game_equipment.n.01')]"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"ansA_Qnst_j-","executionInfo":{"status":"ok","timestamp":1604967898637,"user_tz":300,"elapsed":17164,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"0df03bf3-4054-4391-f333-1ce03bdc7be7","colab":{"base_uri":"https://localhost:8080/"}},"source":["# look at the paths of these three whales\n","print(ball1.hypernym_paths())"],"execution_count":40,"outputs":[{"output_type":"stream","text":["[[Synset('entity.n.01'), Synset('physical_entity.n.01'), Synset('object.n.01'), Synset('whole.n.02'), Synset('artifact.n.01'), Synset('instrumentality.n.03'), Synset('equipment.n.01'), Synset('game_equipment.n.01'), Synset('ball.n.01')]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ifZo4o5ovI-4","executionInfo":{"status":"ok","timestamp":1604967898638,"user_tz":300,"elapsed":17154,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}}},"source":["# define 2 more words and look at their similarity\n","bat = wn.synset('bat.n.01')\n","game = wn.synset('game.n.01')\n","tv = wn.synset('tv.n.01')"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"BKAHDfipuLcP","executionInfo":{"status":"ok","timestamp":1604967898639,"user_tz":300,"elapsed":17147,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"a8b2e84d-63dd-4e3e-fa93-7fc5e451c6aa","colab":{"base_uri":"https://localhost:8080/"}},"source":["# the path similarity gives a similarity score between 0 and 1\n","print(ball1.path_similarity(game))\n","print(ball1.path_similarity(bat))\n","print(ball1.path_similarity(tv))"],"execution_count":42,"outputs":[{"output_type":"stream","text":["0.06666666666666667\n","0.07142857142857142\n","0.125\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5AmlUmmXuUUd","executionInfo":{"status":"ok","timestamp":1604967898641,"user_tz":300,"elapsed":17135,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"28bcd167-3b6d-4a68-9ca9-9b90c6346e20","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Leacock-Chodorow Similarity, also uses path lengths and others\n","print(ball1.lch_similarity(game))\n","print(ball1.lch_similarity(bat))\n","print(ball1.lch_similarity(tv))\n"],"execution_count":43,"outputs":[{"output_type":"stream","text":["0.9295359586241757\n","0.9985288301111273\n","1.55814461804655\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UCqYS0_UuiFD","executionInfo":{"status":"ok","timestamp":1604967898643,"user_tz":300,"elapsed":17120,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"1c3fad3d-8626-4fd3-ea81-b21c37a0e2df","colab":{"base_uri":"https://localhost:8080/"}},"source":["# try Resnik Similarity\n","print(ball1.res_similarity(game, brown_ic))\n","print(ball1.res_similarity(bat, brown_ic))\n","print(ball1.res_similarity(tv, brown_ic))"],"execution_count":44,"outputs":[{"output_type":"stream","text":["-0.0\n","1.5318337432196856\n","3.2576790258866897\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vT79T8cAvsTh","executionInfo":{"status":"ok","timestamp":1604967898644,"user_tz":300,"elapsed":17110,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"a2658b14-6e5c-43db-baac-cb9edb3449d1","colab":{"base_uri":"https://localhost:8080/"}},"source":["# or combine the synonyms/lemma names, definitions and examples\n","for synset in wn.synsets('bat'):\n","\tprint (synset, \":  \")\n","\tprint ('     ', synset.lemma_names())\n","\tprint ('     ', synset.definition())\n","\tprint ('     ', synset.examples())"],"execution_count":45,"outputs":[{"output_type":"stream","text":["Synset('bat.n.01') :  \n","      ['bat', 'chiropteran']\n","      nocturnal mouselike mammal with forelimbs modified to form membranous wings and anatomical adaptations for echolocation by which they navigate\n","      []\n","Synset('bat.n.02') :  \n","      ['bat', 'at-bat']\n","      (baseball) a turn trying to get a hit\n","      ['he was at bat when it happened', 'he got four hits in four at-bats']\n","Synset('squash_racket.n.01') :  \n","      ['squash_racket', 'squash_racquet', 'bat']\n","      a small racket with a long handle used for playing squash\n","      []\n","Synset('cricket_bat.n.01') :  \n","      ['cricket_bat', 'bat']\n","      the club used in playing cricket\n","      ['a cricket bat has a narrow handle and a broad flat end for hitting']\n","Synset('bat.n.05') :  \n","      ['bat']\n","      a club used for hitting a ball in various games\n","      []\n","Synset('bat.v.01') :  \n","      ['bat']\n","      strike with, or as if with a baseball bat\n","      ['bat the ball']\n","Synset('bat.v.02') :  \n","      ['bat', 'flutter']\n","      wink briefly\n","      [\"bat one's eyelids\"]\n","Synset('bat.v.03') :  \n","      ['bat']\n","      have a turn at bat\n","      ['Jones bats first, followed by Martinez']\n","Synset('bat.v.04') :  \n","      ['bat']\n","      use a bat\n","      [\"Who's batting?\"]\n","Synset('cream.v.02') :  \n","      ['cream', 'bat', 'clobber', 'drub', 'thrash', 'lick']\n","      beat thoroughly and conclusively in a competition or fight\n","      ['We licked the other team on Sunday!']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kGuZH_Npv6JS","executionInfo":{"status":"ok","timestamp":1604967898645,"user_tz":300,"elapsed":17101,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}}},"source":["bat = wn.synset('bat.n.05')"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"5Id1x1HIwiku","executionInfo":{"status":"ok","timestamp":1604967898646,"user_tz":300,"elapsed":17089,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"ce085242-56c0-4e34-a6b1-20afc70ebf1a","colab":{"base_uri":"https://localhost:8080/"}},"source":["# or combine the synonyms/lemma names, definitions and examples\n","for synset in wn.synsets('game'):\n","\tprint (synset, \":  \")\n","\tprint ('     ', synset.lemma_names())\n","\tprint ('     ', synset.definition())\n","\tprint ('     ', synset.examples())"],"execution_count":47,"outputs":[{"output_type":"stream","text":["Synset('game.n.01') :  \n","      ['game']\n","      a contest with rules to determine a winner\n","      ['you need four people to play this game']\n","Synset('game.n.02') :  \n","      ['game']\n","      a single play of a sport or other contest\n","      ['the game lasted two hours']\n","Synset('game.n.03') :  \n","      ['game']\n","      an amusement or pastime\n","      ['they played word games', 'he thought of his painting as a game that filled his empty time', 'his life was all fun and games']\n","Synset('game.n.04') :  \n","      ['game']\n","      animal hunted for food or sport\n","      []\n","Synset('game.n.05') :  \n","      ['game']\n","      (tennis) a division of play during which one player serves\n","      []\n","Synset('game.n.06') :  \n","      ['game']\n","      (games) the score at a particular point or the score needed to win\n","      ['the game is 6 all', 'he is serving for the game']\n","Synset('game.n.07') :  \n","      ['game']\n","      the flesh of wild animals that is used for food\n","      []\n","Synset('plot.n.01') :  \n","      ['plot', 'secret_plan', 'game']\n","      a secret scheme to do something (especially something underhand or illegal)\n","      ['they concocted a plot to discredit the governor', 'I saw through his little game from the start']\n","Synset('game.n.09') :  \n","      ['game']\n","      the game equipment needed in order to play a particular game\n","      ['the child received several games for his birthday']\n","Synset('game.n.10') :  \n","      ['game', 'biz']\n","      your occupation or line of work\n","      [\"he's in the plumbing game\", \"she's in show biz\"]\n","Synset('game.n.11') :  \n","      ['game']\n","      frivolous or trifling behavior\n","      ['for actors, memorizing lines is no game', 'for him, life is all fun and games']\n","Synset('bet_on.v.01') :  \n","      ['bet_on', 'back', 'gage', 'stake', 'game', 'punt']\n","      place a bet on\n","      ['Which horse are you backing?', \"I'm betting on the new horse\"]\n","Synset('crippled.s.01') :  \n","      ['crippled', 'halt', 'halting', 'lame', 'gimpy', 'game']\n","      disabled in the feet or legs\n","      ['a crippled soldier', 'a game leg']\n","Synset('game.s.02') :  \n","      ['game', 'gamy', 'gamey', 'gritty', 'mettlesome', 'spirited', 'spunky']\n","      willing to face danger\n","      []\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"q4qGnqsXwrT-","executionInfo":{"status":"ok","timestamp":1604967898646,"user_tz":300,"elapsed":17076,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}}},"source":["game = wn.synset('game.n.02')"],"execution_count":48,"outputs":[]},{"cell_type":"code","metadata":{"id":"xV7qHasmkEdq","executionInfo":{"status":"ok","timestamp":1604968272805,"user_tz":300,"elapsed":482,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"eb928512-56e9-4df0-c542-ae764586b785","colab":{"base_uri":"https://localhost:8080/"}},"source":["# the path similarity gives a similarity score between 0 and 1\n","print(ball1.path_similarity(game))\n","print(ball1.path_similarity(bat))\n","print(ball1.path_similarity(tv))"],"execution_count":59,"outputs":[{"output_type":"stream","text":["0.06666666666666667\n","0.125\n","0.125\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"K1AfnpVxwEpY","executionInfo":{"status":"ok","timestamp":1604967898814,"user_tz":300,"elapsed":17230,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"a9a9215a-62c8-49ea-ef67-caceafe6ca7c","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Leacock-Chodorow Similarity, also uses path lengths and others\n","print(ball1.lch_similarity(game))\n","print(ball1.lch_similarity(bat))\n","print(ball1.lch_similarity(tv))\n"],"execution_count":49,"outputs":[{"output_type":"stream","text":["0.9295359586241757\n","1.55814461804655\n","1.55814461804655\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pOAr3YLkv13k","executionInfo":{"status":"ok","timestamp":1604967898815,"user_tz":300,"elapsed":17214,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"399b9759-52bd-4b44-d435-0ae0d22a1c97","colab":{"base_uri":"https://localhost:8080/"}},"source":["# try Resnik Similarity\n","print(ball1.res_similarity(game, brown_ic))\n","print(ball1.res_similarity(bat, brown_ic))\n","print(ball1.res_similarity(tv, brown_ic))"],"execution_count":50,"outputs":[{"output_type":"stream","text":["-0.0\n","3.2576790258866897\n","3.2576790258866897\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hmvOOTjwx6Z0"},"source":["Lab 6 Part 5"]},{"cell_type":"code","metadata":{"id":"rgVDikUsx8rD","executionInfo":{"status":"ok","timestamp":1604967899546,"user_tz":300,"elapsed":17929,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"ed837819-2a5f-472b-e08a-6bdf5ba3c100","colab":{"base_uri":"https://localhost:8080/"}},"source":["## SentiWordNet\n","nltk.download('sentiwordnet')\n","from nltk.corpus import sentiwordnet as swn\n","# each word judged to be made up of positive, negative and objective meaning\n"],"execution_count":51,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package sentiwordnet to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/sentiwordnet.zip.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3iWbs_0jx_6N","executionInfo":{"status":"ok","timestamp":1604967900545,"user_tz":300,"elapsed":18909,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"66a80a42-d2c0-43b9-d3d8-12296bbe62f2","colab":{"base_uri":"https://localhost:8080/"}},"source":["# sentiwordnet has the same synsets as wordnet, use wn functions\n","print(list(swn.senti_synsets('breakdown')))\n","print(wn.synsets('breakdown'))\n"],"execution_count":52,"outputs":[{"output_type":"stream","text":["[SentiSynset('dislocation.n.02'), SentiSynset('breakdown.n.02'), SentiSynset('breakdown.n.03'), SentiSynset('breakdown.n.04')]\n","[Synset('dislocation.n.02'), Synset('breakdown.n.02'), Synset('breakdown.n.03'), Synset('breakdown.n.04')]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2sSQZysmyIW7","executionInfo":{"status":"ok","timestamp":1604967900548,"user_tz":300,"elapsed":18893,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"6190c711-5b63-4ded-cea5-49f27447b7ea","colab":{"base_uri":"https://localhost:8080/"}},"source":["# the print function gives the positive and negative scores\n","breakdown3 = swn.senti_synset('breakdown.n.03')\n","print (breakdown3)\n"],"execution_count":53,"outputs":[{"output_type":"stream","text":["<breakdown.n.03: PosScore=0.0 NegScore=0.25>\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"85v_adbayL9_","executionInfo":{"status":"ok","timestamp":1604967900549,"user_tz":300,"elapsed":18881,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"aca5ca48-0f08-4a31-d6ea-056f09615360","colab":{"base_uri":"https://localhost:8080/"}},"source":["# there are also separate functions for all the scores\n","print(breakdown3.pos_score())\n","print(breakdown3.neg_score())\n","print(breakdown3.obj_score())\n"],"execution_count":54,"outputs":[{"output_type":"stream","text":["0.0\n","0.25\n","0.75\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AuQ9TTesyN9W","executionInfo":{"status":"ok","timestamp":1604967900550,"user_tz":300,"elapsed":18874,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"9eb07ab0-a471-4b74-e15a-d555ff5b9e03","colab":{"base_uri":"https://localhost:8080/"}},"source":["# some more exploration of sentiment scores of words\n","dogswn1 = swn.senti_synset('dog.n.01')\n","print(dogswn1)\n","print(dogswn1.obj_score())\n"],"execution_count":55,"outputs":[{"output_type":"stream","text":["<dog.n.01: PosScore=0.0 NegScore=0.0>\n","1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"USnOhX3XyS59","executionInfo":{"status":"ok","timestamp":1604967900552,"user_tz":300,"elapsed":18868,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"483cf081-6f6e-42f6-e766-f47062777a9e","colab":{"base_uri":"https://localhost:8080/"}},"source":["goodswn1 = swn.senti_synset('good.a.01')\n","print(goodswn1)\n","print(goodswn1.obj_score())\n"],"execution_count":56,"outputs":[{"output_type":"stream","text":["<good.a.01: PosScore=0.75 NegScore=0.0>\n","0.25\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"80KrbQi8yVLP","executionInfo":{"status":"ok","timestamp":1604967900770,"user_tz":300,"elapsed":19078,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"f6f1c85a-d5b0-486a-a229-38062deedd13","colab":{"base_uri":"https://localhost:8080/"}},"source":["# not all words in WordNet have been scored for sentiment in SentiWordNet\n","#   but the most recent version has scored a lot more so I don't have an example right now\n","print(wn.synsets('exuberant'))\n","ex3 = swn.senti_synset('exuberant.s.03')\n","print(ex3)\n"],"execution_count":57,"outputs":[{"output_type":"stream","text":["[Synset('ebullient.s.01'), Synset('excessive.s.02'), Synset('exuberant.s.03')]\n","<exuberant.s.03: PosScore=0.0 NegScore=0.25>\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"n90QNuS_y2t_","executionInfo":{"status":"ok","timestamp":1604967900774,"user_tz":300,"elapsed":19074,"user":{"displayName":"Quinn Knudsen","photoUrl":"","userId":"09746156274853242129"}},"outputId":"ae79afde-74a7-451d-d62c-20c314916d8e","colab":{"base_uri":"https://localhost:8080/"}},"source":["batswn1 = swn.senti_synset('ball.n.01')\n","print(batswn1)\n","print(batswn1.obj_score())\n"],"execution_count":58,"outputs":[{"output_type":"stream","text":["<ball.n.01: PosScore=0.0 NegScore=0.0>\n","1.0\n"],"name":"stdout"}]}]}